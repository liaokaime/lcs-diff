{"version":3,"sources":["components/comparison.inputs.tsx","separate-words/separate.words.module.ts","components/comparison.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ComparisonInputs","state","texts","onChange","this","props","map","value","index","array","isLast","type","key","event","afterText","target","push","setState","filter","value1","length","Component","SeparateWordsModule","articel","slots","slotClusters","text","split","classKeys","Object","keys","classifys","i","keyName","verify","content","classify","resCluster","cluster","slotItem","forEach","toSlot","toClusters","delBlank","mergeEnter","enter2Standard","exe","join","min","max","mi","Math","mx","charAry","a","String","fromCharCode","conjunction","enter","space","builtInClassify","upperLetters","getRangeChar","char","unicode","charCodeAt","lowerLetters","indexOf","blank","defaultAll","english","concat","Comparison","firstTexts","secendTexts","compareList","articelA","articelB","similarity","articelA_Ary","toWords","articelB_Ary","style","display","flexDirection","flex","justifyContent","alignItems","JSON","stringify","marginTop","backgroundColor","textAlign","onClick","lcs","LCS","listA","listB","compare","t1","t2","getDiff","getSimilarity","width","height","placeholder","wordBreak","flexWrap","margin","unitA","color","unitB","equals","undefined","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.333c763a.chunk.js","sourcesContent":["/**\n * Infinite input box\n * Create by liaokai on 2020-01-02 20:02:33\n */\nimport React, {Component} from 'react';\n\ninterface IProps{\n    onChange : (texts : string[]) =>void\n}\n\ninterface IState{\n    texts : string[]\n}\n\nexport class ComparisonInputs extends Component<IProps,IState>{\n    //state初始化\n    readonly state : IState = {\n        texts : [\"\"]\n    };\n\n    render() {\n        let {onChange} = this.props;\n        let {texts} = this.state;\n        return (\n            <div>\n                {\n                    texts.map((value, index, array) => {\n                        return ((value,index,array,isLast)=>{\n                            return <input type=\"text\" key={index} value={array[index]} onChange={event => {\n                                let texts : string[] = [...this.state.texts];\n                                let afterText = event.target.value;\n                                if(afterText && isLast){\n                                    texts.push(\"\");\n                                }\n                                texts[index] = afterText;\n                                this.setState({texts : texts},()=>{\n                                    onChange(this.state.texts.filter(value1 => value1 !== \"\"))\n                                });\n                            }}/>\n                        })(value,index,array,index === array.length -1);\n                    })\n                }\n            </div>\n        );\n    }\n}","//位置槽\ninterface ISlot {\n    content : string,\n    classify : string\n}\n\n//位置槽集束\ninterface ICluster {\n    classify : string,\n    cluster : ISlot[]\n}\n\n//字符类别\ninterface IClassify {\n    [key : string] : {\n        content : string[],\n        verify : (char:string)=>boolean\n    }\n}\n\nexport class SeparateWordsModule {\n    static readonly conjunction = [\"'\", \"-\",\"`\",\"’\"];   //连词\n    static readonly enter = [\"\\n\", \"\\r\", \"\\r\\n\"];   //回车\n    static readonly space = [\" \",\"　\",\" \"];             //空格\n    //文章\n    private articel = \"\";\n    //位置槽数组\n    private slots: ISlot[] = [];\n    //位置槽集束\n    private slotClusters : ICluster[] = [];\n\n    //构造器\n    constructor(articel: string) {\n        this.articel = articel;\n    }\n\n    //内置字符类别\n    static readonly builtInClassify : IClassify = {\n        //大写字母\n        upperLetters : {\n            content : SeparateWordsModule.getRangeChar(65, 90),\n            verify : (char: string) => {\n                let unicode : number = char.charCodeAt(0);\n                return  unicode >= 65 && unicode <= 90\n            }\n        },\n        //小写字母\n        lowerLetters : {\n            content : SeparateWordsModule.getRangeChar(97, 122),\n            verify : (char: string) => {\n                let unicode : number = char.charCodeAt(0);\n                return  unicode >= 97 && unicode <= 122\n            }\n        },\n        //英文连词\n        conjunction : {\n            content : SeparateWordsModule.conjunction,\n            verify : (char:string) => {\n                return SeparateWordsModule.conjunction.indexOf(char) >= 0\n            }\n        },\n        //回车\n        enter : {\n            content : SeparateWordsModule.enter,\n            verify : (char:string) => {\n                return SeparateWordsModule.enter.indexOf(char) >= 0\n            }\n        },\n        //空格\n        blank : {\n            content : SeparateWordsModule.space,\n            verify : (char : string) => {\n                return SeparateWordsModule.space.indexOf(char) >= 0\n\n            }\n        },\n        //默认\n        defaultAll : {\n            content : [],\n            verify : char => true\n        }\n    };\n\n    //字符类别定义\n    public static readonly classifys : IClassify = {\n        //英文\n        english : {\n            content : SeparateWordsModule.builtInClassify.lowerLetters.content\n                .concat(SeparateWordsModule.builtInClassify.upperLetters.content)\n                .concat(SeparateWordsModule.builtInClassify.conjunction.content),\n            verify : char => {\n                return  SeparateWordsModule.builtInClassify.lowerLetters.verify(char)\n                || SeparateWordsModule.builtInClassify.upperLetters.verify(char)\n                || SeparateWordsModule.builtInClassify.conjunction.verify(char)\n            }\n        },\n        //回车\n        enter : SeparateWordsModule.builtInClassify.enter,\n        //空格\n        blank : SeparateWordsModule.builtInClassify.blank,\n        //默认\n        defaultAll : SeparateWordsModule.builtInClassify.defaultAll\n    };\n\n    //获取范围ACSII码转字符串数组\n    static getRangeChar(min: number, max: number) {\n        let mi = Math.min(min, max);\n        let mx = Math.max(min, max);\n        let charAry: string[] = [];\n        for (let a = mi; a < mx; a++) {\n            charAry.push(String.fromCharCode(a));\n        }\n        return charAry;\n    }\n\n    //字符串转字符槽数组\n    private toSlot(text: string) : ISlot[] {\n        return text.split(\"\").map(value => {\n            let classKeys = Object.keys(SeparateWordsModule.classifys);\n            for (let i = 0; i < classKeys.length; i++) {\n                let keyName = classKeys[i];\n                if (SeparateWordsModule.classifys[keyName].verify(value)) {\n                    return {\n                        content: value,\n                        classify: keyName\n                    }\n                }\n            }\n            return {\n                content : value,\n                classify: \"default\"\n            }\n        });\n    }\n\n    //字符槽数组转集束\n    private toClusters(slots : ISlot[]) : ICluster[] {\n        let newCluster = ()=>({\n            classify : \"\",\n            cluster : []\n        });\n        let resCluster : ICluster[] = [];\n        let cluster : ICluster = newCluster();\n        for(let i =0;i<slots.length;i++){\n            let slotItem = slots[i];\n            if(slotItem.classify === cluster.classify){\n                cluster.cluster.push(slotItem);\n            }else{\n                resCluster.push(cluster);\n                cluster = newCluster();\n                cluster.classify = slotItem.classify;\n                cluster.cluster.push(slotItem);\n            }\n        }\n        resCluster.push(cluster);\n        return resCluster;\n    }\n\n    //删除集束中的空格与空字符串\n    private delBlank(cluster : ICluster[]){\n        return this.slotClusters.filter(value => {\n            return value.classify !== \"blank\" && value.classify !== \"\"\n        })\n    }\n\n    //合并多个回车为单个\n    private mergeEnter(cluster : ICluster[]){\n        cluster.forEach(value => {\n            if(value.classify === \"enter\") {\n                value.cluster = value.cluster.filter((value1, index) => index === 0)\n            }\n        });\n        return cluster;\n    }\n\n    //回车转为标准回车(\"\\r\" \"\\n\" \"\\r\\n\" 转为 \"\\r\\n\")\n    private enter2Standard(cluster : ICluster[]){\n        cluster.forEach(value => {\n            if(value.classify === \"enter\") {\n                value.cluster.forEach(value1 => value1.content = \"\\r\\n\")\n            }\n        });\n        return cluster;\n    }\n\n    //源文章处理\n    private exe(){\n        this.slots = this.toSlot(this.articel);                         //文章转位置槽\n        this.slotClusters = this.toClusters(this.slots);                //位置槽转集束槽\n        this.slotClusters = this.delBlank(this.slotClusters);           //删除space和空白字符串\n        this.slotClusters = this.mergeEnter(this.slotClusters);         //合并回车为单个\n        this.slotClusters = this.enter2Standard(this.slotClusters)      //标准化回车为\\r\\n\n    }\n\n    //导出结果\n    toWords(): string[] {\n        this.exe();\n        return  this.slotClusters.map(value => {\n            return value.cluster.map(value1 => value1.content).join(\"\")\n        })\n    }\n}\n\n","/**\n * Compare page\n * Create by liaokai on 2020-01-02 20:03:30\n */\nimport React, {Component} from 'react';\nimport {ComparisonInputs} from \"./comparison.inputs\";\nimport {SeparateWordsModule} from \"../separate-words/separate.words.module\";\nimport {IComparison,LCS} from \"lcs-diff/dist\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    firstTexts : string[],\n    secendTexts : string[],\n    compareList : IComparison<string | undefined>[],\n    articelA : string,\n    articelB : string,\n    similarity : number\n}\n\nexport class Comparison extends Component<IProps,IState>{\n    //state初始化\n    readonly state : IState = {\n        firstTexts : [],\n        secendTexts : [],\n        compareList : [],\n        articelA : \"\",\n        articelB : \"\",\n        similarity : -1\n    };\n\n    constructor(props: IProps){\n        super(props);\n    }\n    render() {\n        let {} = this.props;\n        let {firstTexts,secendTexts,compareList,articelA,articelB,similarity} = this.state;\n        let articelA_Ary = new SeparateWordsModule(articelA).toWords();\n        let articelB_Ary = new SeparateWordsModule(articelB).toWords();\n        return (\n            <div style={{display:\"flex\",flexDirection:\"column\"}}>\n                <div style={{display: \"flex\"}}>\n                    <div style={{flex:1,display: \"flex\",flexDirection: \"column\"}}>\n                        <div style={{flexDirection: \"row\",justifyContent: \"start\",alignItems: \"start\"}}>\n                            ListA\n                            <ComparisonInputs onChange={texts => this.setState({firstTexts : texts})}/>\n                            <div>\n                                Inputs：{JSON.stringify(firstTexts)}\n                            </div>\n                        </div>\n                        <div style={{marginTop: 20}}>\n                            ListB\n                            <ComparisonInputs onChange={texts => this.setState({secendTexts : texts})}/>\n                            <div>\n                                Inputs：{JSON.stringify(secendTexts)}\n                            </div>\n                        </div>\n                        <div style={{backgroundColor:\"rgb(100,140,240)\",textAlign: \"center\"}} onClick={()=>{\n                            let lcs = new LCS({\n                                content : {\n                                    listA : firstTexts,\n                                    listB : secendTexts,\n                                },\n                                compare : (t1,t2)=>{\n                                    return t1 === t2\n                                }\n                            });\n\n                            let compareList = lcs.getDiff();\n                            let similarity = lcs.getSimilarity();\n\n                            this.setState(\n                                {compareList : compareList,similarity : similarity}\n                            );\n                        }}>\n                            Comparison\n                        </div>\n                    </div>\n                    <div style={{flex : 1,display:\"flex\",flexDirection: \"column\"}}>\n                        <textarea value={articelA} style={{width: '100%',height:150}}  placeholder={\"Please enter the article A\"} onChange={value => {\n                            this.setState({articelA : value.target.value},);\n                        }}/>\n                        <div style={{width:\"100%\",wordBreak:\"break-all\"}}>\n                            Inputs：{JSON.stringify(articelA_Ary)}\n                        </div>\n                        <textarea value={articelB} style={{width: '100%',height:150}}  placeholder={\"Please enter the article B\"} onChange={value => {\n                            this.setState({articelB : value.target.value},);\n                        }}/>\n                        <div style={{width:\"100%\",wordBreak:\"break-all\"}}>\n                            Inputs：{JSON.stringify(articelB_Ary)}\n                        </div>\n                        <div style={{backgroundColor:\"rgb(100,140,240)\",textAlign: \"center\"}} onClick={()=>{\n                            let lcs =new LCS({\n                                content : {\n                                    listA : articelA_Ary,\n                                    listB : articelB_Ary,\n                                },\n                                compare : (t1,t2)=>{\n                                    return t1 === t2\n                                }\n                            });\n\n                            let compareList = lcs.getDiff();\n                            let similarity = lcs.getSimilarity();\n                            this.setState(\n                                {compareList : compareList,similarity:similarity}\n                            );\n                        }}>\n                            Comparison\n                        </div>\n                    </div>\n                </div>\n                <div style={{display:\"flex\",flexDirection : \"row\",flexWrap: \"wrap\",width: \"100%\"}}>\n                    {\n                        compareList.map((value,index) => <div key={index} style={{display: \"flex\", flexDirection: \"column\", justifyContent : \"space-between\",margin: 10,backgroundColor:\"#bbb\"}}>\n                            <div>\n                                {value.unitA\n                                    ?\n                                    <div>{value.unitA ?? \" \"}</div>\n                                    :\n                                    <div style={{color: \"gray\"}}>null</div>\n                                }\n                            </div>\n                            <div>\n                                {value.unitB\n                                    ?\n                                    <div>{value.unitB ?? \" \"}</div>\n                                    :\n                                    <div style={{color: \"gray\"}}>null</div>\n                                }\n                            </div>\n                            <div style={{color : value.equals ? \"green\" : \"red\"}}>{value.equals ? \"same\" : \"different\"}</div>\n                        </div>)\n                    }\n                </div>\n                {\n                    similarity > -1 ? <h3>Similarity：{similarity*100}%</h3> : undefined\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Comparison} from \"./components/comparison\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <Comparison/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}